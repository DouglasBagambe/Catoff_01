"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./hooks/useSolanaChallenge.ts":
/*!*************************************!*\
  !*** ./hooks/useSolanaChallenge.ts ***!
  \*************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useSolanaChallenge: () => (/* binding */ useSolanaChallenge)\n/* harmony export */ });\n/* harmony import */ var _solana_wallet_adapter_react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @solana/wallet-adapter-react */ \"../node_modules/@solana/wallet-adapter-react/lib/esm/index.js\");\n/* harmony import */ var _project_serum_anchor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @project-serum/anchor */ \"../node_modules/@project-serum/anchor/dist/browser/index.js\");\n/* harmony import */ var _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @solana/web3.js */ \"../node_modules/@solana/web3.js/lib/index.browser.esm.js\");\n/* harmony import */ var _types_gaming_challenge__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../types/gaming_challenge */ \"./types/gaming_challenge.ts\");\n\n\n\n\n\nconst PROGRAM_ID = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__.PublicKey(\"GBUZP3faF5m8nctD6NwoC5ZCGNbq95d1g53LuR7U97FS\");\nconst useSolanaChallenge = ()=>{\n    const { connection } = (0,_solana_wallet_adapter_react__WEBPACK_IMPORTED_MODULE_3__.useConnection)();\n    const wallet = (0,_solana_wallet_adapter_react__WEBPACK_IMPORTED_MODULE_3__.useWallet)();\n    const { publicKey, signTransaction, sendTransaction } = wallet;\n    if (!connection) {\n        throw new Error(\"Solana connection not established\");\n    }\n    const getProvider = ()=>{\n        if (!publicKey || !signTransaction) {\n            throw new Error(\"Wallet not connected\");\n        }\n        const provider = new _project_serum_anchor__WEBPACK_IMPORTED_MODULE_0__.AnchorProvider(connection, {\n            publicKey,\n            signTransaction: async (tx)=>{\n                try {\n                    return await signTransaction(tx);\n                } catch (error) {\n                    console.error(\"Transaction signing failed:\", error);\n                    throw error;\n                }\n            },\n            signAllTransactions: wallet.signAllTransactions\n        }, {\n            commitment: \"confirmed\"\n        });\n        return provider;\n    };\n    const getProgram = ()=>{\n        const provider = getProvider();\n        return new _project_serum_anchor__WEBPACK_IMPORTED_MODULE_0__.Program(_types_gaming_challenge__WEBPACK_IMPORTED_MODULE_2__.IDL, PROGRAM_ID, provider);\n    };\n    const createChallenge = async (wagerAmount)=>{\n        try {\n            if (!publicKey) {\n                throw new Error(\"Wallet not connected\");\n            }\n            if (wagerAmount <= 0) {\n                throw new Error(\"Wager amount must be greater than 0\");\n            }\n            const balance = await connection.getBalance(publicKey);\n            const lamports = wagerAmount * _project_serum_anchor__WEBPACK_IMPORTED_MODULE_0__.web3.LAMPORTS_PER_SOL;\n            if (balance < lamports) {\n                throw new Error(\"Insufficient balance for wager amount\");\n            }\n            const program = getProgram();\n            const challenge = _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__.Keypair.generate();\n            const statsHash = Array.from({\n                length: 32\n            }, ()=>Math.floor(Math.random() * 256));\n            const instruction = await program.methods.createChallenge(new _project_serum_anchor__WEBPACK_IMPORTED_MODULE_0__.BN(lamports), statsHash).accounts({\n                challenge: challenge.publicKey,\n                creator: publicKey,\n                systemProgram: _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__.SystemProgram.programId\n            }).instruction();\n            const latestBlockhash = await connection.getLatestBlockhash();\n            const transaction = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__.Transaction({\n                feePayer: publicKey,\n                recentBlockhash: latestBlockhash.blockhash\n            }).add(instruction);\n            transaction.sign(challenge);\n            const signature = await sendTransaction(transaction, connection, {\n                skipPreflight: false,\n                preflightCommitment: \"confirmed\",\n                maxRetries: 3\n            });\n            await connection.confirmTransaction({\n                signature,\n                blockhash: latestBlockhash.blockhash,\n                lastValidBlockHeight: latestBlockhash.lastValidBlockHeight\n            }, \"confirmed\");\n            return challenge.publicKey.toString();\n        } catch (error) {\n            console.error(\"Failed to create challenge:\", error);\n            if (error instanceof Error) {\n                throw new Error(\"Failed to create challenge: \".concat(error.message));\n            }\n            throw new Error(\"Failed to create challenge: Unknown error\");\n        }\n    };\n    const acceptChallenge = async (challengeId)=>{\n        try {\n            if (!publicKey) {\n                throw new Error(\"Wallet not connected\");\n            }\n            const program = getProgram();\n            const challengePubkey = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__.PublicKey(challengeId);\n            const instruction = await program.methods.acceptChallenge().accounts({\n                challenge: challengePubkey,\n                challenger: publicKey,\n                systemProgram: _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__.SystemProgram.programId\n            }).instruction();\n            const latestBlockhash = await connection.getLatestBlockhash();\n            const transaction = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__.Transaction({\n                feePayer: publicKey,\n                recentBlockhash: latestBlockhash.blockhash\n            }).add(instruction);\n            const signature = await sendTransaction(transaction, connection, {\n                skipPreflight: false,\n                preflightCommitment: \"confirmed\",\n                maxRetries: 3\n            });\n            await connection.confirmTransaction({\n                signature,\n                blockhash: latestBlockhash.blockhash,\n                lastValidBlockHeight: latestBlockhash.lastValidBlockHeight\n            }, \"confirmed\");\n            return true;\n        } catch (error) {\n            console.error(\"Failed to accept challenge:\", error);\n            if (error instanceof Error) {\n                throw new Error(\"Failed to accept challenge: \".concat(error.message));\n            }\n            throw new Error(\"Failed to accept challenge: Unknown error\");\n        }\n    };\n    const completeChallenge = async (challengeId, winner, stats)=>{\n        try {\n            if (!publicKey) {\n                throw new Error(\"Wallet not connected\");\n            }\n            const program = getProgram();\n            const challengePubkey = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__.PublicKey(challengeId);\n            const winnerPubkey = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__.PublicKey(winner);\n            const zkProof = new Uint8Array(32);\n            const instruction = await program.methods.completeChallenge(winnerPubkey, zkProof).accounts({\n                challenge: challengePubkey,\n                creator: publicKey,\n                challenger: winnerPubkey\n            }).instruction();\n            const latestBlockhash = await connection.getLatestBlockhash();\n            const transaction = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__.Transaction({\n                feePayer: publicKey,\n                recentBlockhash: latestBlockhash.blockhash\n            }).add(instruction);\n            const signature = await sendTransaction(transaction, connection, {\n                skipPreflight: false,\n                preflightCommitment: \"confirmed\",\n                maxRetries: 3\n            });\n            await connection.confirmTransaction({\n                signature,\n                blockhash: latestBlockhash.blockhash,\n                lastValidBlockHeight: latestBlockhash.lastValidBlockHeight\n            }, \"confirmed\");\n            return true;\n        } catch (error) {\n            console.error(\"Failed to complete challenge:\", error);\n            if (error instanceof Error) {\n                throw new Error(\"Failed to complete challenge: \".concat(error.message));\n            }\n            throw new Error(\"Failed to complete challenge: Unknown error\");\n        }\n    };\n    const getChallengeDetails = async (challengeId)=>{\n        try {\n            if (!challengeId) {\n                throw new Error(\"Challenge ID is required\");\n            }\n            const program = getProgram();\n            const challengePubkey = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__.PublicKey(challengeId);\n            const account = await program.account.challenge.fetch(challengePubkey);\n            return {\n                creator: account.creator.toString(),\n                wagerAmount: account.wagerAmount.toNumber() / _project_serum_anchor__WEBPACK_IMPORTED_MODULE_0__.web3.LAMPORTS_PER_SOL,\n                isComplete: account.isComplete,\n                challenger: account.challenger.equals(_solana_web3_js__WEBPACK_IMPORTED_MODULE_1__.PublicKey.default) ? null : account.challenger.toString(),\n                createdAt: new Date(account.createdAt.toNumber() * 1000)\n            };\n        } catch (error) {\n            console.error(\"Failed to fetch challenge details:\", error);\n            if (error instanceof Error) {\n                throw new Error(\"Failed to fetch challenge details: \".concat(error.message));\n            }\n            throw new Error(\"Failed to fetch challenge details: Unknown error\");\n        }\n    };\n    return {\n        createChallenge,\n        acceptChallenge,\n        completeChallenge,\n        getChallengeDetails\n    };\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./hooks/useSolanaChallenge.ts\n"));

/***/ })

});